// matches/static/matches/js/live_match.js
// ----------------------------------------------------------------------------
// –õ–∞–π–≤‚Äë—Å—Ç—Ä–∞–Ω–∏—Ü–∞ –º–∞—Ç—á–∞: WebSocket‚Äë–∫–ª–∏–µ–Ω—Ç, –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –º–æ–º–µ–Ω—Ç—É–º–∞ –∏ —Ç.–¥.
// ----------------------------------------------------------------------------

// --- –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–µ—Ä—Ö–Ω–µ–≥–æ —É—Ä–æ–≤–Ω—è ------------------------------------------------
let matchId = null;            // —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ DOMContentLoaded

// --- –£—Ç–∏–ª–∏—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ CSRF ----------------------------------------------------
function getCookie(name) {
    let cookieValue = null;
    if (document.cookie && document.cookie !== '') {
        const cookies = document.cookie.split(';');
        for (let i = 0; i < cookies.length; i++) {
            const cookie = cookies[i].trim();
            if (cookie.substring(0, name.length + 1) === (name + '=')) {
                cookieValue = decodeURIComponent(cookie.substring(name.length + 1));
                break;
            }
        }
    }
    return cookieValue;
}

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω—ã --------------------------------------------------
const replaceButton = document.querySelector('#replace-player');
if (replaceButton) {
    replaceButton.addEventListener('click', () => {
        const actionForm = document.querySelector('.matchUserAction');
        if (actionForm) actionForm.classList.remove('display-action');

        const select = document.getElementById('playerToReplaceSelect');
        if (!select || !select.value) {
            console.warn('No player selected for substitution');
            return;
        }

        const csrftoken = getCookie('csrftoken');
        fetch(`/matches/${matchId}/substitute/`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRFToken': csrftoken
            },
            body: JSON.stringify({ out_player_id: select.value })
        })
        .then(r => r.json())
        .then(d => console.log('Substitution response', d))
        .catch(err => console.error('Substitution error', err));
    });
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ -----------------------------------------------------------
document.addEventListener('DOMContentLoaded', () => {
    const matchInfoArea = document.getElementById('matchInfoArea');
    if (!matchInfoArea) {
        console.error('Element #matchInfoArea not found!');
        return;
    }

    matchId               = matchInfoArea.dataset.matchId;
    const initialStatus   = matchInfoArea.dataset.matchStatus;
    let   currentStatus   = initialStatus;
    const isLive          = initialStatus === 'in_progress';

    // DOM‚Äë—ç–ª–µ–º–µ–Ω—Ç—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–µ –ø–æ–≤—Ç–æ—Ä–Ω–æ
    const timeElement        = document.getElementById('matchTime');
    const homeScoreElement   = document.querySelector('.home-score');
    const awayScoreElement   = document.querySelector('.away-score');
    const eventsContainer    = document.getElementById('originalEvents');
    const eventsBox          = eventsContainer ? eventsContainer.querySelector('.events-box') : null;
    const statBox            = document.querySelector('.stat-box');
    const homeMomentumIcon   = document.getElementById('homeMomentumIcon');
    const awayMomentumIcon   = document.getElementById('awayMomentumIcon');
    const homeMomentumValue  = document.getElementById('homeMomentumValue');
    const awayMomentumValue  = document.getElementById('awayMomentumValue');
    const injuryActionForm   = document.querySelector('#matchUserAction-inj');
    const nextMinuteBtn      = document.getElementById('nextMinuteBtn');

    // --- –ó–∞—â–∏—Ç–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∫–ª—é—á–µ–≤—ã—Ö —É–∑–ª–æ–≤ --------------------------
    if (!timeElement)      console.error('Element #matchTime not found!');
    if (!homeScoreElement) console.error('Element .home-score not found!');
    if (!awayScoreElement) console.error('Element .away-score not found!');
    if (!eventsBox)        console.error('Element .events-box inside #originalEvents not found!');
    if (!statBox)          console.error('Element .stat-box not found!');

    //---------------------------------------------------------------------------
    // –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò
    //---------------------------------------------------------------------------

    // –ü–æ–∫–∞–∑ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (—É–ø—Ä–æ—â—ë–Ω–Ω–æ–µ, –≤—ã–≤–æ–¥–∏—Ç –≤ –∫–æ–Ω—Å–æ–ª—å)
    function showMessage(text, type = 'info') {
        console.log(`MESSAGE (${type}): ${text}`);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ HTML‚Äë–∏–∫–æ–Ω–∫–∏ –∏ —á–∏—Å–ª–∞ –º–æ–º–µ–Ω—Ç—É–º–∞
    function setMomentum(iconEl, value, valueEl) {
        if (!iconEl) return;
        iconEl.className = 'momentum-icon';

        let icon = 'üòê';
        if      (value >= 75)  { icon = 'üåü'; iconEl.classList.add('momentum-unstoppable'); }
        else if (value >= 50)  { icon = 'üî•'; iconEl.classList.add('momentum-hot'); }
        else if (value >= 25)  { icon = 'üí™'; iconEl.classList.add('momentum-positive'); }
        else if (value <= -75) { icon = 'üò±'; iconEl.classList.add('momentum-panic'); }
        else if (value <= -50) { icon = 'üíî'; iconEl.classList.add('momentum-demoralized'); }
        else if (value <= -25) { icon = 'üò∞'; iconEl.classList.add('momentum-nervous'); }
        else                   { icon = 'üòê'; iconEl.classList.add('momentum-neutral'); }

        iconEl.textContent = icon;
        if (valueEl) valueEl.textContent = value;
    }

    function updateMomentum(data) {
        if (data.home_momentum !== undefined)
            setMomentum(homeMomentumIcon, data.home_momentum, homeMomentumValue);
        if (data.away_momentum !== undefined)
            setMomentum(awayMomentumIcon, data.away_momentum, awayMomentumValue);
    }

    // --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ -------------------------------------------------
    function updateStatistics(data) {
        if (!statBox) return;

        const passesSpan      = statBox.querySelector('.stat-passes');
        const shootsSpan      = statBox.querySelector('.stat-shoots');
        const possessionsSpan = statBox.querySelector('.stat-possessions');
        const foulsSpan       = statBox.querySelector('.stat-fouls');
        const injuriesSpan    = statBox.querySelector('.stat-injuries');
        const injCounterEl    = document.getElementById('inj');

        if (passesSpan      && data.st_passes      !== undefined) passesSpan.textContent      = data.st_passes;
        if (shootsSpan      && data.st_shoots      !== undefined) shootsSpan.textContent      = data.st_shoots;
        if (possessionsSpan && data.st_possessions !== undefined) possessionsSpan.textContent = data.st_possessions;
        if (foulsSpan       && data.st_fouls       !== undefined) foulsSpan.textContent       = data.st_fouls;
        if (injuriesSpan    && data.st_injury      !== undefined) injuriesSpan.textContent    = data.st_injury;
        if (injCounterEl    && data.st_injury      !== undefined) injCounterEl.textContent    = data.st_injury;

        // –≤—Å–ø–ª—ã–≤–∞—é—â–∞—è —Ñ–æ—Ä–º–∞ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞ —Ç—Ä–∞–≤–º—É
        if (injCounterEl && injuryActionForm && data.st_injury !== undefined) {
            const oldVal = parseInt(injCounterEl.innerText) || 0;
            if (oldVal !== data.st_injury) {
                injuryActionForm.style.display = 'block';
                injuryActionForm.classList.add('display-action');
            }
        }
    }

    // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥ ---------------------------------------------
    function addEventToList(evt) {
        if (!eventsBox) return;

        const sig = `${evt.minute}-${evt.event_type}-${evt.description}`;
        window.processedEvents = window.processedEvents || new Set();
        if (window.processedEvents.has(sig)) return;
        window.processedEvents.add(sig);

        const div = document.createElement('div');
        div.className = 'list-group-item new-event';

        const icons = {
            goal: ' ‚öΩ ', counterattack: ' ‚ö° ', interception: ' üîÑ ',
            shot_miss: ' ‚ùå ', pass: ' ‚û° ', foul: ' ‚ö† ',
            injury_concern: ' ‚úö ', yellow_card: ' üü® ', red_card: ' üü• ',
            substitution: ' ‚áÜ ', match_start: ' ‚ñ∂ ', match_end: ' ‚èπ ',
            match_paused: ' ‚è∏ ', info: ' ‚ìò '
        };
        const icon = icons[evt.event_type] || ' M ';

        let playerInfo = evt.player_name ? ` (${evt.player_name})` : '';
        if (evt.related_player_name)
            playerInfo += ` -> ${evt.related_player_name}`;

        div.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong>${evt.minute}'</strong>
                    <span class="event-icon">${icon}</span>
                    ${evt.description}
                    <small class="text-muted">${playerInfo}</small>
                </div>
            </div>`;

        eventsBox.prepend(div);

        // –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –ª–æ–≥ 100 —Å—Ç—Ä–æ–∫–∞–º–∏
        while (eventsBox.children.length > 100)
            eventsBox.removeChild(eventsBox.lastChild);

        // –∞–Ω–∏–º–∞—Ü–∏—è
        requestAnimationFrame(() =>
            requestAnimationFrame(() => div.classList.add('new-event-visible')));
    }

    // --- WebSocket -------------------------------------------------------------
    if (!isLive) {
        console.log(`Match ${matchId} is not live (${initialStatus}), WS disabled.`);
        return;
    }

    const wsScheme = window.location.protocol === 'https:' ? 'wss' : 'ws';
    const wsUrl    = `${wsScheme}://${window.location.host}/ws/match/${matchId}/`;
    const socket   = new WebSocket(wsUrl);

    socket.onopen = () =>
        console.log(`WebSocket connected: ${wsUrl}`);

    socket.onerror = e => {
        console.error('WebSocket error:', e);
        showMessage('Connection error occurred.', 'danger');
    };

    socket.onclose = e => {
        console.log(`WebSocket closed (code ${e.code})`);
        if (currentStatus === 'in_progress')
            showMessage('Connection lost. Match updates stopped.', 'warning');
    };

    // ----------------------- –ò–°–•–û–î–ù–û–ï –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ï –ú–ï–°–¢–û -----------------------
    socket.onmessage = e => {
        try {
            const msg  = JSON.parse(e.data);
            if (msg.type !== 'match_update' || !msg.data) return;
            const d = msg.data;
            console.log('WS data:', d);

            // 1) –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: –ø–æ–ª–Ω—ã–π —Å—Ç–µ–π—Ç + –∏—Å—Ç–æ—Ä–∏—è
            if (d.partial_update === undefined && Array.isArray(d.events)) {
                eventsBox.innerHTML = '';
                d.events.forEach(addEventToList);
                if (timeElement && d.minute !== undefined)
                    timeElement.textContent = `${d.minute}'`;
                updateStatistics(d);
                updateMomentum(d);
            }

            // 2) –õ—é–±–æ–µ –ß–ê–°–¢–ò–ß–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ (—Å —Å–æ–±—ã—Ç–∏–µ–º –ò–õ–ò –±–µ–∑ –Ω–µ–≥–æ)
            else if (d.partial_update === true) {

                // –µ—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –µ—Å—Ç—å ‚Äî –≤—ã–≤–æ–¥–∏–º
                if (d.events && Array.isArray(d.events) && d.events.length > 0) {
                    const ev = d.events[0];
                    addEventToList(ev);

                    // –æ–±–Ω–æ–≤–ª—è–µ–º —Å—á—ë—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≥–æ–ª–µ
                    if (ev.event_type === 'goal') {
                        if (d.home_score !== undefined) homeScoreElement.textContent = d.home_score;
                        if (d.away_score !== undefined) awayScoreElement.textContent = d.away_score;
                    }
                }

                // –≤—Ä–µ–º—è
                if (timeElement && d.minute !== undefined)
                    timeElement.textContent = `${d.minute}'`;

                updateStatistics(d);
                updateMomentum(d);   // ‚Üê –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –í–°–ï–ì–î–ê
            }

            // 3) –ü–∞–∫–µ—Ç —Ç–æ–ª—å–∫–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
            else if (d.partial_update === undefined && d.events === undefined) {
                if (timeElement && d.minute !== undefined)
                    timeElement.textContent = `${d.minute}'`;
                updateStatistics(d);
                updateMomentum(d);
            }

            // 4) –ö–æ–Ω—Ç—Ä–æ–ª—å —Å—Ç–∞—Ç—É—Å–∞ –º–∞—Ç—á–∞
            if (d.status && d.status !== currentStatus) {
                currentStatus = d.status;
                if (['finished', 'cancelled', 'error'].includes(currentStatus)) {
                    showMessage(`Match ${currentStatus}. Live updates stopped.`, 'info');
                    socket.close();
                }
            }

        } catch (err) {
            console.error('WS processing error:', err, e.data);
        }
    };
});
