// matches/static/matches/js/live_match.js

// --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –∑–∞–º–µ–Ω—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å) ---
const replaceButton = document.querySelector('#replace-player');
if (replaceButton) {
    replaceButton.addEventListener('click', function(){
        const actionForm = document.querySelector('.matchUserAction'); // –ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–ª–∞—Å—Å –≤–º–µ—Å—Ç–æ ID –¥–ª—è —Ñ–æ—Ä–º—ã
        if (actionForm) {
            actionForm.classList.remove('display-action');
        }
        // TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–º–µ–Ω–µ –Ω–∞ —Å–µ—Ä–≤–µ—Ä
        console.log("Replace button clicked - Implement replacement logic.");
        // –ü—Ä–∏–º–µ—Ä: –ø–æ–ª—É—á–∏—Ç—å –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞ –∏–∑ select#playerToReplaceSelect
        // –û—Ç–ø—Ä–∞–≤–∏—Ç—å AJAX/fetch –∑–∞–ø—Ä–æ—Å –Ω–∞ –±—ç–∫–µ–Ω–¥ —Å ID –º–∞—Ç—á–∞ –∏ ID –∏–≥—Ä–æ–∫–∞
    });
}

// --- –û—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
document.addEventListener('DOMContentLoaded', function() {
    const matchInfoArea = document.getElementById('matchInfoArea');
    if (!matchInfoArea) {
        console.error('Element with ID "matchInfoArea" not found!');
        return;
    }

    const matchId = matchInfoArea.dataset.matchId;
    const initialStatus = matchInfoArea.dataset.matchStatus; 
    let currentMatchStatus = initialStatus; // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–æ–∫
    let isLive = initialStatus === 'in_progress'; 

    console.log('Match setup:', { matchId, isLive, status: initialStatus });

    // --- –ü–æ–ª—É—á–∞–µ–º —Å—Å—ã–ª–∫–∏ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç—ã DOM –æ–¥–∏–Ω —Ä–∞–∑ ---
    const timeElement = document.getElementById('matchTime');
    const homeScoreElement = document.querySelector('.home-score');
    const awayScoreElement = document.querySelector('.away-score');
    const eventsListContainer = document.getElementById('originalEvents'); // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
    const eventsBox = eventsListContainer ? eventsListContainer.querySelector('.events-box') : null; // –í–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –±–ª–æ–∫ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
    const statBox = document.querySelector('.stat-box'); // –ë–ª–æ–∫ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const injuryActionForm = document.querySelector('#matchUserAction-inj'); // –§–æ—Ä–º–∞ –¥–ª—è —Ç—Ä–∞–≤–º—ã

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    if (!timeElement) { console.error('Element #matchTime not found!'); }
    if (!homeScoreElement) { console.error('Element .home-score not found!'); }
    if (!awayScoreElement) { console.error('Element .away-score not found!'); }
    if (!eventsBox) { console.error('Element .events-box inside #originalEvents not found!'); }
    if (!statBox) { console.error('Element .stat-box not found!'); }
    // injuryActionForm –º–æ–∂–µ—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å, —ç—Ç–æ –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ

    // --- –§—É–Ω–∫—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ ---
    function updateStatistics(data) {
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ statBox –Ω–∞–π–¥–µ–Ω
        if (!statBox) return; 

        // –ò—â–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç—Ä–∞–≤–º (–º–æ–∂–µ—Ç –±—ã—Ç—å –≤–Ω—É—Ç—Ä–∏ statBox –∏–ª–∏ –æ—Ç–¥–µ–ª—å–Ω–æ)
        const injCounterElement = document.getElementById('inj'); 

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É —Ä–µ–∞–∫—Ü–∏–∏ –Ω–∞ —Ç—Ä–∞–≤–º—É, –µ—Å–ª–∏ —Å—á–µ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–∏–ª—Å—è –∏ —Ñ–æ—Ä–º–∞ –µ—Å—Ç—å
        if (injCounterElement && injuryActionForm && data.st_injury !== undefined) {
            const currentInjuries = parseInt(injCounterElement.innerText) || 0;
            if (currentInjuries !== data.st_injury) {
                console.log(`Injury count changed from ${currentInjuries} to ${data.st_injury}. Showing action form.`);
                injuryActionForm.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ñ–æ—Ä–º—É
                injuryActionForm.classList.add('display-action'); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å (–µ—Å–ª–∏ –Ω—É–∂–µ–Ω –¥–ª—è —Å—Ç–∏–ª–µ–π)
                // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–≤—Ç–æ—Å–∫—Ä—ã—Ç–∏–µ
                // setTimeout(() => {
                //     injuryActionForm.style.display = 'none';
                //     injuryActionForm.classList.remove('display-action');
                // }, 15000); 
            }
        }

        // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏, –∏—Å–ø–æ–ª—å–∑—É—è –¥–∞–Ω–Ω—ã–µ –∏–∑ data, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–æ–ª–µ–µ –±–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ø–æ—Å–æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ querySelector –≤–Ω—É—Ç—Ä–∏ statBox
        const passesSpan = statBox.querySelector('.stat-passes');
        const shootsSpan = statBox.querySelector('.stat-shoots');
        const possessionsSpan = statBox.querySelector('.stat-possessions');
        const foulsSpan = statBox.querySelector('.stat-fouls');
        const injuriesSpan = statBox.querySelector('.stat-injuries'); // –ú–æ–∂–µ—Ç –±—ã—Ç—å —Ç–µ–º –∂–µ, —á—Ç–æ –∏ injCounterElement

        if (passesSpan && data.st_passes !== undefined) passesSpan.textContent = data.st_passes;
        if (shootsSpan && data.st_shoots !== undefined) shootsSpan.textContent = data.st_shoots;
        if (possessionsSpan && data.st_possessions !== undefined) possessionsSpan.textContent = data.st_possessions;
        if (foulsSpan && data.st_fouls !== undefined) foulsSpan.textContent = data.st_fouls;
        if (injuriesSpan && data.st_injury !== undefined) injuriesSpan.textContent = data.st_injury;
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Ç–¥–µ–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if (injCounterElement && data.st_injury !== undefined) injCounterElement.textContent = data.st_injury;

    }

    // --- –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ —Å–æ–±—ã—Ç–∏—è –≤ –ª–æ–≥ ---
    function addEventToList(event) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –Ω–∞—á–∞–ª–æ —Ñ—É–Ω–∫—Ü–∏–∏
        console.log(">>> addEventToList called with event:", event); 

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ .events-box
        if (!eventsBox) {
             console.error("!!! eventsBox element not found inside #originalEvents! Cannot add event."); 
             return; 
        }
        // –õ–æ–≥–∏—Ä—É–µ–º, —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–∞–π–¥–µ–Ω
        console.log(">>> Found eventsBox element:", eventsBox); 

        // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç —Å–æ–±—ã—Ç–∏—è
        const eventDiv = document.createElement('div');
        eventDiv.className = 'list-group-item new-event'; // –ö–ª–∞—Å—Å –¥–ª—è –∞–Ω–∏–º–∞—Ü–∏–∏

        // –ò–∫–æ–Ω–∫–∏ –¥–ª—è —Å–æ–±—ã—Ç–∏–π
        let icon = ' M '; 
        switch(event.event_type) {
            case 'goal': icon = ' ‚öΩ '; break;
            case 'interception': icon = ' üîÑ '; break;
            case 'shot_miss': icon = ' ‚ùå '; break;
            case 'pass': icon = ' ‚û°Ô∏è '; break;
            case 'foul': icon = ' ‚ö†Ô∏è '; break;
            case 'injury_concern': icon = ' ‚úö '; break;
            case 'yellow_card': icon = ' üü® '; break;
            case 'red_card': icon = ' üü• '; break;
            case 'substitution': icon = ' ‚áÜ '; break;
            case 'match_start': icon = ' ‚ñ∂Ô∏è '; break;
            case 'match_end': icon = ' ‚èπÔ∏è '; break;
            case 'match_paused': icon = ' ‚è∏Ô∏è '; break;
        }

        // –ò–º–µ–Ω–∞ –∏–≥—Ä–æ–∫–æ–≤
        let playerInfo = event.player_name ? ` (${event.player_name})` : '';
        if (event.related_player_name) {
             playerInfo += ` -> ${event.related_player_name}`;
        }

        // –§–æ—Ä–º–∏—Ä—É–µ–º HTML
        eventDiv.innerHTML = `
            <div class="d-flex justify-content-between align-items-center">
                <div>
                    <strong>${event.minute}'</strong> 
                    <span class="event-icon">${icon}</span>
                    ${event.description}
                    <small class="text-muted">${playerInfo}</small> 
                </div>
            </div>
        `;
        
        // –í—Å—Ç–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ —Å–ø–∏—Å–∫–∞
        if (eventsBox.firstChild) {
            eventsBox.insertBefore(eventDiv, eventsBox.firstChild);
            console.log(">>> Event prepended to eventsBox"); 
        } else {
            // –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –±—ã–ª –ø—É—Å—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä, —Å–æ–¥–µ—Ä–∂–∞–ª "Waiting..."), –æ—á–∏—Å—Ç–∏–º –µ–≥–æ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º
            eventsBox.innerHTML = ''; 
            eventsBox.appendChild(eventDiv);
            console.log(">>> Event appended to initially empty eventsBox"); 
        }

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–±—ã—Ç–∏–π
        while (eventsBox.children.length > 30) {
            eventsBox.removeChild(eventsBox.lastChild);
        }

        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        requestAnimationFrame(() => {
            requestAnimationFrame(() => {
                 eventDiv.classList.add('new-event-visible');
                 console.log(">>> Animation class added for:", eventDiv); 
            });
        });
    }

    // --- –õ–æ–≥–∏–∫–∞ WebSocket ---
    if (isLive) {
        console.log('Match is live, attempting WebSocket connection...');
        
        const wsScheme = window.location.protocol === 'https:' ? 'wss' : 'ws';
        const wsUrl = `${wsScheme}://${window.location.host}/ws/match/${matchId}/`;
        console.log('WebSocket URL:', wsUrl) ;
        
        const matchSocket = new WebSocket(wsUrl);

        matchSocket.onopen = function(e) {
            console.log('WebSocket connection established successfully!');
        };

        matchSocket.onclose = function(e) {
            console.log(`WebSocket connection closed: Code=${e.code}, Reason='${e.reason}', WasClean=${e.wasClean}`);
            if (currentMatchStatus === 'in_progress') { // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –º–∞—Ç—á –µ—â–µ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏
                showMessage('Connection lost. Match updates stopped.', 'warning');
            }
        };

        matchSocket.onerror = function(e) {
            console.error('WebSocket error occurred:', e);
            showMessage('Connection error occurred.', 'danger');
        };

        matchSocket.onmessage = function(e) {
            try {
                const messageData = JSON.parse(e.data);
                
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
                if (messageData.type !== 'match_update' || !messageData.data) {
                     console.warn("Received message is not 'match_update' or missing 'data'.", messageData);
                     return;
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º –ü–û–õ–£–ß–ï–ù–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
                console.log('Received WS message data:', messageData.data); 

                const data = messageData.data; 

                // --- –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –ª–æ–≥–∏–∫–∏ ---

                // 1. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–û–ë–´–¢–ò–Ø (–æ—Ç broadcast...)
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ 'events' –∏ 'partial_update'
                if (data.events && data.partial_update === true && Array.isArray(data.events) && data.events.length > 0) {
                    console.log('Processing EVENT update (from broadcast_minute_events_in_chunks):', data.events[0]);
                    addEventToList(data.events[0]); 
                } 
                // 2. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –°–û–°–¢–û–Ø–ù–ò–Ø (–æ—Ç send_update)
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º –û–¢–°–£–¢–°–¢–í–ò–ï 'events'
                else if (data.events === undefined) { 
                    console.log('Processing STATE update (from send_update)');
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è
                    if (timeElement && data.minute !== undefined) {
                        timeElement.textContent = `${data.minute}'`;
                    } else if(timeElement) {
                        console.warn("State update received, but 'minute' is missing or undefined.");
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç
                    if (homeScoreElement && data.home_score !== undefined) {
                        homeScoreElement.textContent = data.home_score;
                    } else if(homeScoreElement) {
                         console.warn("State update received, but 'home_score' is missing or undefined.");
                    }
                     if (awayScoreElement && data.away_score !== undefined) {
                        awayScoreElement.textContent = data.away_score;
                    } else if(awayScoreElement) {
                         console.warn("State update received, but 'away_score' is missing or undefined.");
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                    updateStatistics(data);

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –º–∞—Ç—á–∞ –∏ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–∫–µ—Ç, –µ—Å–ª–∏ –º–∞—Ç—á –∑–∞–∫–æ–Ω—á–∏–ª—Å—è
                    if (data.status && data.status !== currentMatchStatus) {
                         console.log(`Match status changed from ${currentMatchStatus} to: ${data.status}`);
                         currentMatchStatus = data.status; // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
                         const statusDisplay = document.getElementById('matchStatusDisplay');
                         if(statusDisplay) statusDisplay.textContent = data.status; // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞

                         if (currentMatchStatus === 'finished' || currentMatchStatus === 'cancelled' || currentMatchStatus === 'error') {
                              console.log("Match ended. Closing WebSocket.");
                              showMessage(`Match ${currentMatchStatus}. Live updates stopped.`, 'info');
                              matchSocket.close(); 
                              // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ —Ä–µ–ø–ª–µ—è –∏ —Ç.–¥.
                              const replayButton = document.getElementById('startReplayBtn');
                              if (replayButton && currentMatchStatus === 'finished') {
                                   replayButton.style.display = 'block'; // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É —Ä–µ–ø–ª–µ—è
                              }
                         }
                    }
                } else {
                     // –°–æ–æ–±—â–µ–Ω–∏–µ –∏–º–µ–µ—Ç –∫–ª—é—á 'events', –Ω–æ –Ω–µ –∏–º–µ–µ—Ç —Ñ–ª–∞–≥–∞ partial_update
                     // –∏–ª–∏ events - –ø—É—Å—Ç–æ–π –º–∞—Å—Å–∏–≤. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ª–æ–≥–∏—Ä—É–µ–º.
                     console.warn("Received message seems like a state update but contains 'events' key, or 'events' is empty. Ignored.", data);
                }

            } catch (error) {
                console.error('Error parsing WebSocket message or processing data:', error);
                console.error('Raw message data:', e.data);
            }
        };

    } else {
        console.log('Match is not live (' + initialStatus + '), skipping WebSocket setup.');
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        // –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ data-–∞—Ç—Ä–∏–±—É—Ç—ã –∏–ª–∏ JS –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        // const initialData = { ... }; 
        // updateStatistics(initialData);
    }
}); // End DOMContentLoaded