# Generated by Django 5.1.4 on 2025-07-27 06:45

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('matches', '0010_momentum'),
        ('players', '0004_player_personality_traits'),
    ]

    operations = [
        migrations.CreateModel(
            name='CharacterEvolution',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('trigger_event', models.CharField(choices=[('goal_scored', 'Goal Scored'), ('match_won', 'Match Won'), ('match_lost', 'Match Lost'), ('rivalry_interaction', 'Rivalry Interaction'), ('team_chemistry', 'Team Chemistry Event'), ('injury', 'Injury'), ('transfer', 'Transfer'), ('captain_appointment', 'Captain Appointment')], max_length=30)),
                ('trait_changed', models.CharField(help_text='Which personality trait was affected', max_length=50)),
                ('old_value', models.IntegerField()),
                ('new_value', models.IntegerField()),
                ('change_amount', models.IntegerField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(blank=True, help_text='Match where evolution occurred', null=True, on_delete=django.db.models.deletion.CASCADE, to='matches.match')),
                ('player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='character_evolutions', to='players.player')),
                ('related_player', models.ForeignKey(blank=True, help_text='Other player involved in evolution trigger', null=True, on_delete=django.db.models.deletion.SET_NULL, to='players.player')),
            ],
            options={
                'verbose_name': 'Character Evolution',
                'verbose_name_plural': 'Character Evolutions',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['player', 'timestamp'], name='matches_cha_player__8cc4a8_idx'), models.Index(fields=['trigger_event', 'timestamp'], name='matches_cha_trigger_6e7505_idx')],
            },
        ),
        migrations.CreateModel(
            name='NarrativeEvent',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('event_type', models.CharField(choices=[('rivalry_clash', 'Rivalry Clash'), ('chemistry_moment', 'Chemistry Moment'), ('character_growth', 'Character Growth'), ('leadership_moment', 'Leadership Moment'), ('underdog_story', 'Underdog Story'), ('veteran_wisdom', 'Veteran Wisdom')], max_length=30)),
                ('importance', models.CharField(choices=[('minor', 'Minor'), ('significant', 'Significant'), ('major', 'Major'), ('legendary', 'Legendary')], default='minor', max_length=20)),
                ('minute', models.PositiveIntegerField()),
                ('title', models.CharField(max_length=200)),
                ('description', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('match', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='narrative_events', to='matches.match')),
                ('primary_player', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='primary_narrative_events', to='players.player')),
                ('secondary_player', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='secondary_narrative_events', to='players.player')),
            ],
            options={
                'verbose_name': 'Narrative Event',
                'verbose_name_plural': 'Narrative Events',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['match', 'minute'], name='matches_nar_match_i_906a48_idx'), models.Index(fields=['primary_player', 'event_type'], name='matches_nar_primary_68d26c_idx'), models.Index(fields=['importance', 'timestamp'], name='matches_nar_importa_0b80a4_idx')],
            },
        ),
        migrations.CreateModel(
            name='PlayerRivalry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rivalry_type', models.CharField(choices=[('competitive', 'Competitive Rivalry'), ('personal', 'Personal Dislike'), ('positional', 'Positional Competition'), ('historical', 'Historical Conflict')], default='competitive', max_length=20)),
                ('intensity', models.CharField(choices=[('mild', 'Mild'), ('moderate', 'Moderate'), ('strong', 'Strong'), ('intense', 'Intense')], default='mild', max_length=10)),
                ('created_date', models.DateField(auto_now_add=True)),
                ('last_interaction', models.DateField(blank=True, null=True)),
                ('interaction_count', models.PositiveIntegerField(default=0)),
                ('aggression_modifier', models.FloatField(default=0.0, help_text='Modifier for aggression when playing against rival (-1.0 to 1.0)')),
                ('performance_modifier', models.FloatField(default=0.0, help_text='Modifier for performance when playing against rival (-1.0 to 1.0)')),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rivalries_as_player1', to='players.player')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='rivalries_as_player2', to='players.player')),
            ],
            options={
                'verbose_name': 'Player Rivalry',
                'verbose_name_plural': 'Player Rivalries',
                'indexes': [models.Index(fields=['player1', 'intensity'], name='matches_pla_player1_f5b0f3_idx'), models.Index(fields=['player2', 'intensity'], name='matches_pla_player2_f12524_idx')],
                'unique_together': {('player1', 'player2')},
            },
        ),
        migrations.CreateModel(
            name='TeamChemistry',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('chemistry_type', models.CharField(choices=[('friendship', 'Friendship'), ('mentor_mentee', 'Mentor-Mentee'), ('partnership', 'Partnership'), ('leadership', 'Leadership Bond')], default='friendship', max_length=20)),
                ('strength', models.FloatField(default=0.0, help_text='Chemistry strength (0.0 to 1.0)')),
                ('created_date', models.DateField(auto_now_add=True)),
                ('last_positive_interaction', models.DateField(blank=True, null=True)),
                ('positive_interactions', models.PositiveIntegerField(default=0)),
                ('passing_bonus', models.FloatField(default=0.0, help_text='Bonus for passes between these players (0.0 to 1.0)')),
                ('teamwork_bonus', models.FloatField(default=0.0, help_text='Bonus for teamwork actions (0.0 to 1.0)')),
                ('player1', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chemistry_as_player1', to='players.player')),
                ('player2', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='chemistry_as_player2', to='players.player')),
            ],
            options={
                'verbose_name': 'Team Chemistry',
                'verbose_name_plural': 'Team Chemistry',
                'indexes': [models.Index(fields=['player1', 'strength'], name='matches_tea_player1_c262ef_idx'), models.Index(fields=['player2', 'strength'], name='matches_tea_player2_dda601_idx')],
                'unique_together': {('player1', 'player2')},
            },
        ),
    ]
