# tournaments/tasks.py

import time
import logging
from celery import shared_task
from django.utils import timezone
from django.db import transaction, OperationalError
from django.core.management import call_command
from matches.models import Match
from players.models import Player # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from clubs.models import Club     # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from .models import Season, Championship, League
import random # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∏–º–ø–æ—Ä—Ç –µ—Å—Ç—å
from datetime import timedelta
from django.core.exceptions import ObjectDoesNotExist

logger = logging.getLogger("match_creation")


@shared_task(name='tournaments.simulate_active_matches', bind=True)
def simulate_active_matches(self):
    """
    –ü–æ—à–∞–≥–æ–≤–∞—è —Å–∏–º—É–ª—è—Ü–∏—è –º–∞—Ç—á–µ–π (–∫–∞–∂–¥–∞—è ¬´–º–∏–Ω—É—Ç–∞¬ª).
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥).
    """
    now = timezone.now()
    logger.info(f"üîÅ [simulate_active_matches] –ó–∞–ø—É—Å–∫ —Å–∏–º—É–ª—è—Ü–∏–∏ –∞–∫—Ç–∏–≤–Ω—ã—Ö –º–∞—Ç—á–µ–π –≤ {now}")

    matches = Match.objects.filter(status='in_progress')
    if not matches.exists():
        logger.info("üîç –ù–µ—Ç –º–∞—Ç—á–µ–π —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 'in_progress'.")
        return "No matches in progress"

    logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {matches.count()} –º–∞—Ç—á–µ–π –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏.")

    from matches.match_simulation import simulate_one_minute

    for match in matches:
        try:
            logger.info(f"üîí –ü–æ–ø—ã—Ç–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –º–∞—Ç—á–∞ ID={match.id} –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏...")

            with transaction.atomic():
                match_locked = Match.objects.select_for_update().get(id=match.id)
                minute_to_simulate = match_locked.current_minute

                logger.info(
                    f"‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é –º–∏–Ω—É—Ç—ã {minute_to_simulate} "
                    f"–¥–ª—è –º–∞—Ç—á–∞ ID={match_locked.id}"
                )

                updated_match = simulate_one_minute(match_locked)

                if updated_match:
                    updated_match.save()
                    logger.info(
                        f"‚úÖ –ú–∏–Ω—É—Ç–∞ {minute_to_simulate} —Å–∏–º—É–ª–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ: "
                        f"{updated_match.home_team} vs {updated_match.away_team}, "
                        f"—Å—á—ë—Ç: {updated_match.home_score}:{updated_match.away_score}"
                    )
                else:
                    logger.warning(
                        f"‚ö†Ô∏è simulate_one_minute –≤–µ—Ä–Ω—É–ª–∞ None –¥–ª—è –º–∞—Ç—á–∞ ID={match.id}"
                    )

        except Match.DoesNotExist:
            logger.warning(f"‚ùå –ú–∞—Ç—á ID={match.id} –∏—Å—á–µ–∑ –∏–∑ –±–∞–∑—ã –≤–æ –≤—Ä–µ–º—è —Å–∏–º—É–ª—è—Ü–∏–∏.")
        except OperationalError as e:
            logger.error(f"üîí –û—à–∏–±–∫–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –º–∞—Ç—á–∞ {match.id}: {e}")
        except Exception as e:
            logger.exception(f"üî• –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∏–º—É–ª—è—Ü–∏–∏ –º–∞—Ç—á–∞ {match.id}: {e}")

    return f"Simulated {matches.count()} matches"



@shared_task(name='tournaments.check_season_end', bind=True)
def check_season_end(self):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫–æ–Ω—á–∞–Ω–∏–µ —Å–µ–∑–æ–Ω–∞ –∏ —Å–æ–∑–¥–∞—ë—Ç –Ω–æ–≤—ã–π –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è, –∫ –ø—Ä–∏–º–µ—Ä—É, —Ä–∞–∑ –≤ –¥–µ–Ω—å –∏–ª–∏ —Ä–∞–∑ –≤ —á–∞—Å (—Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º Celery Beat).
    """
    try:
        with transaction.atomic():
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º select_for_update –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –≥–æ–Ω–æ–∫ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ/–∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–∞
            current_season = Season.objects.select_for_update().get(is_active=True)
            today = timezone.now().date()

            is_end_date_passed = today > current_season.end_date

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤—Å–µ –ª–∏ –º–∞—Ç—á–∏ —Å–µ–∑–æ–Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã
            all_matches_in_season = Match.objects.filter(
                championshipmatch__championship__season=current_season
            )
            finished_matches_count = all_matches_in_season.filter(status='finished').count()
            total_matches_count = all_matches_in_season.count() # –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–∞—Ç—á–µ–π –≤ —Å–µ–∑–æ–Ω–µ

            # –£—Å–ª–æ–≤–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: –¥–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ –ò –≤—Å–µ –º–∞—Ç—á–∏ —Å—ã–≥—Ä–∞–Ω—ã (–∏–ª–∏ –Ω–µ—Ç –º–∞—Ç—á–µ–π)
            all_matches_played = (total_matches_count == 0 or finished_matches_count == total_matches_count)

            if is_end_date_passed and all_matches_played:
                # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π –µ—â–µ —Ä–∞–∑ –ø—Ä–æ–≤–µ—Ä–∏–º –Ω–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –º–∞—Ç—á–∏ (—Ö–æ—Ç—è all_matches_played –¥–æ–ª–∂–Ω–æ –±—ã–ª–æ —ç—Ç–æ –ø–æ–∫—Ä—ã—Ç—å)
                unfinished_matches = Match.objects.filter(
                    championshipmatch__championship__season=current_season,
                    status__in=['scheduled', 'in_progress', 'paused'] # –î–æ–±–∞–≤–∏–º paused
                ).count()

                if unfinished_matches > 0:
                    return f"Season {current_season.number} has {unfinished_matches} unfinished matches"

                call_command('handle_season_transitions')

                current_season.is_active = False
                current_season.save()

                call_command('create_new_season')

                new_season = Season.objects.get(is_active=True)
                championships = Championship.objects.filter(season=new_season)
                total_teams = sum(c.teams.count() for c in championships)
                return (
                    f"Season {current_season.number} ended. "
                    f"New season {new_season.number} created."
                )
            else:
                 return f"Season {current_season.number} is still active"

    except Season.DoesNotExist:
        try:
             # –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞—Ç—å —Å–µ–∑–æ–Ω, –µ—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –Ω–µ—Ç
             call_command('create_new_season')
             return "No active season found, created initial season."
        except Exception as e_create:
             return "No active season found, failed to create initial one."
    except Exception as e:
        # –ù–µ –ø–µ—Ä–µ–≤—ã–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É, —á—Ç–æ–±—ã –Ω–µ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å Celery Beat
        return f"Error in season end check: {str(e)}"


def extract_player_ids_from_lineup(current_lineup):
    """
    –ò–∑–≤–ª–µ–∫–∞–µ—Ç ID –∏–≥—Ä–æ–∫–æ–≤ –∏–∑ —Å–ª–æ–≤–∞—Ä—è —Å–æ—Å—Ç–∞–≤–∞ (–∫–ª—é—á–∏ '0'-'10').
    –û–∂–∏–¥–∞–µ—Ç, —á—Ç–æ current_lineup - —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π —Å–ª–æ–≤–∞—Ä—å {'0': {...}, '1': {...}, ...}.
    """
    player_ids = set()
    if not isinstance(current_lineup, dict):
        return player_ids

    for slot_index_str, player_data in current_lineup.items():
        if isinstance(player_data, dict):
            pid_str = player_data.get('playerId')
            if pid_str:
                try:
                    player_ids.add(int(pid_str))
                except (ValueError, TypeError):
                    pass
        # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞, –µ—Å–ª–∏ –æ–Ω –µ—â–µ –≥–¥–µ-—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
        # else: ...

    return player_ids


# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø complete_lineup ---
def complete_lineup(club: Club, current_lineup: dict):
    """
    –î–æ–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Å–æ—Å—Ç–∞–≤ –¥–æ 11 –∏–≥—Ä–æ–∫–æ–≤, –∏—Å–ø–æ–ª—å–∑—É—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö
    –∏ –¥–æ–±–∞–≤–ª—è—è –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –±–µ–∑ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ–ª–Ω—ã–π —Å–æ—Å—Ç–∞–≤ (—Å–ª–æ–≤–∞—Ä—å 0-10) –∏–ª–∏ None, –µ—Å–ª–∏ –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ.
    –û–∂–∏–¥–∞–µ—Ç current_lineup –≤ —Ñ–æ—Ä–º–∞—Ç–µ {'0': {...}, '1': {...}, ...}.
    """
    all_players_qs = club.player_set.all()
    all_players_map = {p.id: p for p in all_players_qs} # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –ø–æ ID
    total_players_in_club = len(all_players_map)

    if total_players_in_club < 11:
        return None

    final_lineup = {} # –†–µ–∑—É–ª—å—Ç–∞—Ç –±—É–¥–µ—Ç –∑–¥–µ—Å—å (–∫–æ–ø–∏—è –∏–ª–∏ –¥–æ–ø–æ–ª–Ω–µ–Ω–Ω—ã–π)
    used_player_ids = set()

    # --- 1. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å–æ—Å—Ç–∞–≤ (–∫–ª—é—á–∏ '0' - '10') ---
    if isinstance(current_lineup, dict):
        for slot_index_str, player_data in current_lineup.items():
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –∫–ª—é—á–∞ —Å–ª–æ—Ç–∞
            try:
                slot_index_int = int(slot_index_str)
                if not (0 <= slot_index_int <= 10):
                    continue
            except (ValueError, TypeError):
                continue

            if not isinstance(player_data, dict):
                continue

            player_id_str = player_data.get('playerId')
            if not player_id_str:
                continue

            try:
                player_id = int(player_id_str)
                if player_id in used_player_ids:
                    continue

                player_obj = all_players_map.get(player_id)
                if not player_obj:
                    continue

                # –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–∞–≤–∞ –≤ –∏—Ç–æ–≥–æ–≤—ã–π
                final_lineup[slot_index_str] = {
                    "playerId": str(player_obj.id),
                    "slotType": player_data.get("slotType", "unknown"), # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø —Å–ª–æ—Ç–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                    "slotLabel": player_data.get("slotLabel", f"SLOT_{slot_index_str}"),
                    "playerPosition": player_obj.position
                }
                used_player_ids.add(player_id)

            except (ValueError, TypeError):
                continue

    # --- 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–∞—Ç–∞—Ä—è, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ---
    if '0' not in final_lineup:
        # –ò—â–µ–º –≤—Ä–∞—Ç–∞—Ä—è —Å—Ä–µ–¥–∏ –ù–ï–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
        available_gks = [
            p for p_id, p in all_players_map.items()
            if p.position == 'Goalkeeper' and p_id not in used_player_ids
        ]
        if not available_gks:
            return None # –ù–µ –º–æ–∂–µ–º —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤ –±–µ–∑ –≤—Ä–∞—Ç–∞—Ä—è

        keeper = available_gks[0] # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–≥–æ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
        final_lineup['0'] = {
            "playerId": str(keeper.id),
            "slotType": "goalkeeper",
            "slotLabel": "GK",
            "playerPosition": keeper.position
        }
        used_player_ids.add(keeper.id)

    # --- 3. –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ ---
    needed_players = 11 - len(final_lineup)
    if needed_players <= 0:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–ª—é—á–∏ 0-10 –µ—Å—Ç—å
        if len(final_lineup) == 11 and all(str(i) in final_lineup for i in range(11)):
            return final_lineup # –°–æ—Å—Ç–∞–≤ —É–∂–µ –ø–æ–ª–Ω—ã–π –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π
        else:
            return None # –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è —Å–∏—Ç—É–∞—Ü–∏—è

    # –ò—â–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–æ–ª–µ–≤—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ (–Ω–µ –≤—Ä–∞—Ç–∞—Ä–µ–π –∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö)
    available_field_players = [
        p for p_id, p in all_players_map.items()
        if p.position != 'Goalkeeper' and p_id not in used_player_ids
    ]

    if len(available_field_players) < needed_players:
        return None # –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –¥–æ–∫–æ–º–ø–ª–µ–∫—Ç–∞—Ü–∏–∏

    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
    chosen_fillers = random.sample(available_field_players, needed_players)
    filler_idx = 0

    # –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—É—Å—Ç—ã–µ —Å–ª–æ—Ç—ã 1-10
    for i in range(1, 11):
        slot_key = str(i)
        if slot_key not in final_lineup:
            if filler_idx < len(chosen_fillers):
                player_to_add = chosen_fillers[filler_idx]
                final_lineup[slot_key] = {
                    "playerId": str(player_to_add.id),
                    "slotType": "auto", # –¢–∏–ø —Å–ª–æ—Ç–∞ –Ω–µ –∏–∑–≤–µ—Å—Ç–µ–Ω, —Å—Ç–∞–≤–∏–º –∞–≤—Ç–æ
                    "slotLabel": f"AUTO_{slot_key}",
                    "playerPosition": player_to_add.position
                }
                used_player_ids.add(player_to_add.id) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                filler_idx += 1
            else:
                return None # –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ

    # –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    if len(final_lineup) == 11 and all(str(i) in final_lineup for i in range(11)):
        return final_lineup
    else:
        return None # –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–±—Ä–∞—Ç—å 11 –∏–≥—Ä–æ–∫–æ–≤ –∏–ª–∏ –∫–ª—é—á–∏ –Ω–µ 0-10


@shared_task(name='tournaments.start_scheduled_matches')
def start_scheduled_matches():
    """
    –ü–µ—Ä–µ–≤–æ–¥–∏—Ç –º–∞—Ç—á–∏ –∏–∑ scheduled –≤ in_progress –∏ –∫–æ–ø–∏—Ä—É–µ—Ç/–¥–æ–ø–æ–ª–Ω—è–µ—Ç —Å–æ—Å—Ç–∞–≤—ã –∫–æ–º–∞–Ω–¥.
    """
    now = timezone.now()

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º transaction.atomic –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–∞–Ω–¥—ã –æ—Ç–¥–µ–ª—å–Ω–æ,
    # —á—Ç–æ–±—ã –æ—à–∏–±–∫–∞ –≤ –æ–¥–Ω–æ–π –Ω–µ –æ—Ç–∫–∞—Ç—ã–≤–∞–ª–∞ –¥—Ä—É–≥–∏–µ.
    matches_to_process = Match.objects.filter(
        status='scheduled',
        datetime__lte=now
    )
    started_count = 0
    skipped_count = 0

    for match in matches_to_process:
        try:
            with transaction.atomic():
                # –ë–ª–æ–∫–∏—Ä—É–µ–º –º–∞—Ç—á –Ω–∞ –≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
                match_locked = Match.objects.select_for_update().get(pk=match.pk)

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –µ—â–µ —Ä–∞–∑ –≤–Ω—É—Ç—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, –≤–¥—Ä—É–≥ –æ–Ω –∏–∑–º–µ–Ω–∏–ª—Å—è
                if match_locked.status != 'scheduled' or match_locked.datetime > timezone.now():
                    skipped_count += 1
                    continue

                final_home_lineup = None
                final_away_lineup = None
                home_tactic = 'balanced'
                away_tactic = 'balanced'

                # --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–æ–º–∞—à–Ω—é—é –∫–æ–º–∞–Ω–¥—É ---
                home_data_from_club = match_locked.home_team.lineup or {"lineup": {}, "tactic": "balanced"}
                if not isinstance(home_data_from_club, dict) or 'lineup' not in home_data_from_club:
                     home_data_from_club = {"lineup": {}, "tactic": "balanced"}

                home_lineup_from_club = home_data_from_club.get('lineup', {})
                home_tactic = home_data_from_club.get('tactic', 'balanced')

                if isinstance(home_lineup_from_club, dict) and len(home_lineup_from_club) >= 11 and all(str(i) in home_lineup_from_club for i in range(11)):
                     # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤ –≤ –∫–ª—É–±–µ —É–∂–µ –ø–æ–ª–Ω—ã–π (11 –∏–≥—Ä–æ–∫–æ–≤, –∫–ª—é—á–∏ 0-10), –ø—Ä–æ—Å—Ç–æ –±–µ—Ä–µ–º –µ–≥–æ
                     final_home_lineup = home_lineup_from_club
                else:
                     # –ï—Å–ª–∏ —Å–æ—Å—Ç–∞–≤ –Ω–µ–ø–æ–ª–Ω—ã–π –∏–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π, –ø—ã—Ç–∞–µ–º—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç—å
                     completed_home = complete_lineup(match_locked.home_team, home_lineup_from_club)
                     if completed_home is None:
                         skipped_count += 1
                         continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –º–∞—Ç—á, –æ—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –Ω–µ–≥–æ
                     final_home_lineup = completed_home

                # --- –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–æ—Å—Ç–µ–≤—É—é –∫–æ–º–∞–Ω–¥—É (–∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ) ---
                away_data_from_club = match_locked.away_team.lineup or {"lineup": {}, "tactic": "balanced"}
                if not isinstance(away_data_from_club, dict) or 'lineup' not in away_data_from_club:
                     away_data_from_club = {"lineup": {}, "tactic": "balanced"}

                away_lineup_from_club = away_data_from_club.get('lineup', {})
                away_tactic = away_data_from_club.get('tactic', 'balanced')

                if isinstance(away_lineup_from_club, dict) and len(away_lineup_from_club) >= 11 and all(str(i) in away_lineup_from_club for i in range(11)):
                     final_away_lineup = away_lineup_from_club
                else:
                     completed_away = complete_lineup(match_locked.away_team, away_lineup_from_club)
                     if completed_away is None:
                         skipped_count += 1
                         continue # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–æ—Ç –º–∞—Ç—á
                     final_away_lineup = completed_away

                # --- –ï—Å–ª–∏ –æ–±–∞ —Å–æ—Å—Ç–∞–≤–∞ –≥–æ—Ç–æ–≤—ã, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∏ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å ---
                if final_home_lineup and final_away_lineup:
                    match_locked.home_lineup = final_home_lineup
                    match_locked.home_tactic = home_tactic
                    match_locked.away_lineup = final_away_lineup
                    match_locked.away_tactic = away_tactic
                    match_locked.status = 'in_progress'
                    match_locked.save()
                    started_count += 1
                else:
                    # –≠—Ç–∞ –≤–µ—Ç–∫–∞ –Ω–µ –¥–æ–ª–∂–Ω–∞ —Å—Ä–∞–±–æ—Ç–∞—Ç—å, –µ—Å–ª–∏ continue –≤—ã—à–µ –æ—Ç—Ä–∞–±–æ—Ç–∞–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
                    skipped_count += 1
                    continue

        except Match.DoesNotExist:
             skipped_count += 1
        except OperationalError as e_lock:
             skipped_count += 1
        except Exception as e_match:
             skipped_count += 1

    return f"{started_count} matches started, {skipped_count} skipped."

# --- –ö–û–ù–ï–¶ –§–ê–ô–õ–ê tournaments/tasks.py ---
