import { useEffect, useRef, useState } from "react";

import Avatar from "@mui/material/Avatar";
import BottomNavigation from "@mui/material/BottomNavigation";
import BottomNavigationAction from "@mui/material/BottomNavigationAction";
import Box from "@mui/material/Box";
import CssBaseline from "@mui/material/CssBaseline";
import List from "@mui/material/List";
import ListItemAvatar from "@mui/material/ListItemAvatar";
import ListItemButton from "@mui/material/ListItemButton";
import ListItemText from "@mui/material/ListItemText";
import Paper from "@mui/material/Paper";

import NiArrowCircleLeft from "@/template_full/icons/nexture/ni-arrow-circle-left";
import NiHeart from "@/template_full/icons/nexture/ni-heart";
import NiPin from "@/template_full/icons/nexture/ni-pin";

function refreshMessages(): MessageExample[] {
  const getRandomInt = (max: number) => Math.floor(Math.random() * Math.floor(max));

  return Array.from(new Array(16)).map(() => messageExamples[getRandomInt(messageExamples.length)]);
}

export default function BottomNavigationAbsolute() {
  const [value, setValue] = useState(0);
  const ref = useRef<HTMLDivElement>(null);
  const [messages, setMessages] = useState(() => refreshMessages());

  useEffect(() => {
    (ref.current as HTMLDivElement).ownerDocument.body.scrollTop = 0;
    setMessages(refreshMessages());
  }, [value, setMessages]);

  return (
    <Box className="relative pb-2" ref={ref}>
      <CssBaseline />
      <List className="mb-16 h-80 overflow-auto">
        {messages.map(({ primary, secondary, person }, index) => (
          <ListItemButton key={index + person}>
            <ListItemAvatar>
              <Avatar alt="Profile Picture" src={person} className="mr-3" />
            </ListItemAvatar>
            <ListItemText primary={primary} secondary={secondary} />
          </ListItemButton>
        ))}
      </List>
      <Paper className="absolute right-0 bottom-0 left-0">
        <BottomNavigation
          showLabels
          value={value}
          className="rounded-none"
          onChange={(_event, newValue) => {
            setValue(newValue);
          }}
        >
          <BottomNavigationAction label="Recents" icon={<NiArrowCircleLeft />} />
          <BottomNavigationAction label="Favorites" icon={<NiHeart />} />
          <BottomNavigationAction label="Archive" icon={<NiPin />} />
        </BottomNavigation>
      </Paper>
    </Box>
  );
}

interface MessageExample {
  primary: string;
  secondary: string;
  person: string;
}

const messageExamples: readonly MessageExample[] = [
  {
    primary: "Brunch this week?",
    secondary: "I'll be in the neighbourhood this week. Let's grab a bite to eat",
    person: "/images/avatars/avatar-5.jpg",
  },
  {
    primary: "Birthday Gift",
    secondary: `Do you have a suggestion for a good present for John on his work
      anniversary. I am really confused & would love your thoughts on it.`,
    person: "/images/avatars/avatar-5.jpg",
  },
  {
    primary: "Recipe to try",
    secondary: "I am try out this new BBQ recipe, I think this might be amazing",
    person: "/images/avatars/avatar-2.jpg",
  },
  {
    primary: "Yes!",
    secondary: "I have the tickets to the ReactConf for this year.",
    person: "/images/avatars/avatar-3.jpg",
  },
  {
    primary: "Doctor's Appointment",
    secondary: "My appointment for the doctor was rescheduled for next Saturday.",
    person: "/images/avatars/avatar-4.jpg",
  },
  {
    primary: "Discussion",
    secondary: `Menus that are generated by the bottom app bar (such as a bottom
      navigation drawer or overflow menu) open as bottom sheets at a higher elevation
      than the bar.`,
    person: "/images/avatars/avatar-5.jpg",
  },
  {
    primary: "Summer BBQ",
    secondary: `Who wants to have a cookout this weekend? I just got some furniture
      for my backyard and would love to fire up the grill.`,
    person: "/images/avatars/avatar-1.jpg",
  },
];

