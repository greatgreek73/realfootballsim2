#!/usr/bin/env python3
"""
–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Å–∞ –æ—Ç –≤—Ä–∞—Ç–∞—Ä—è
–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∫–∞–∂–¥—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç —Ñ–æ—Ä–º—É–ª—ã pass_success_probability()
"""

import os
import sys
import django

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Django –æ–∫—Ä—É–∂–µ–Ω–∏—è
sys.path.append('/mnt/c/realfootballsim')
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'realfootballsim.settings')
django.setup()

from matches.models import Match
from clubs.models import Club
from players.models import Player
from matches.match_simulation import choose_player, zone_prefix, get_team_momentum, next_zone, clamp


def debug_pass_probability(
    passer: Player,
    recipient: Player,
    opponent: Player | None,
    *,
    from_zone: str,
    to_zone: str,
    high: bool = False,
    momentum: int = 0,
) -> dict:
    """–î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–∞–∂–¥–æ–≥–æ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ —Ñ–æ—Ä–º—É–ª—ã –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏ –ø–∞—Å–∞"""
    
    f_prefix = zone_prefix(from_zone)
    t_prefix = zone_prefix(to_zone)
    
    # 1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    def_base = 0.6
    if f_prefix == "GK" and t_prefix == "DEF":
        def_base = 0.9
    elif f_prefix == "DEF" and t_prefix == "DM":
        def_base = 0.8
    elif f_prefix == "DM" and t_prefix == "MID":
        def_base = 0.75
    elif f_prefix == "MID" and t_prefix == "AM":
        def_base = 0.7
    elif f_prefix == "AM" and t_prefix == "FWD":
        def_base = 0.65
    base = def_base
    
    # 2. –®—Ç—Ä–∞—Ñ –∑–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—å (–¥–ª—è –≤—ã—Å–æ–∫–∏—Ö –ø–∞—Å–æ–≤)
    distance_penalty = 0
    if high:
        ROW_INDEX = {"GK": 0, "DEF": 1, "DM": 2, "MID": 3, "AM": 4, "FWD": 5}
        try:
            distance = ROW_INDEX[t_prefix] - ROW_INDEX[f_prefix]
        except Exception:
            distance = 1
        distance_penalty = 0.05 * max(distance - 1, 0)
        base -= distance_penalty
    
    # 3. –ë–æ–Ω—É—Å—ã
    bonus = (passer.passing + passer.vision) / 200
    rec_bonus = recipient.positioning / 200 if recipient else 0
    heading_bonus = recipient.heading / 200 if high and recipient else 0
    
    # 4. –®—Ç—Ä–∞—Ñ—ã –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞
    penalty = 0
    if opponent:
        penalty = (opponent.marking + opponent.tackling) / 400
    
    # 5. –ú–Ω–æ–∂–∏—Ç–µ–ª–∏
    stamina_factor = passer.stamina / 100
    morale_factor = 0.5 + passer.morale / 200
    momentum_factor = 1 + momentum / 200
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    raw_probability = (base + bonus + rec_bonus + heading_bonus - penalty) * stamina_factor * morale_factor * momentum_factor
    final_probability = clamp(raw_probability)
    
    return {
        'from_zone': from_zone,
        'to_zone': to_zone,
        'base_probability': def_base,
        'distance_penalty': distance_penalty,
        'adjusted_base': base,
        'passer_bonus': bonus,
        'recipient_bonus': rec_bonus,
        'heading_bonus': heading_bonus,
        'opponent_penalty': penalty,
        'stamina_factor': stamina_factor,
        'morale_factor': morale_factor,
        'momentum_factor': momentum_factor,
        'raw_probability': raw_probability,
        'final_probability': final_probability,
        'passer_stats': {
            'passing': passer.passing,
            'vision': passer.vision,
            'stamina': passer.stamina,
            'morale': passer.morale,
        },
        'recipient_stats': {
            'positioning': recipient.positioning if recipient else None,
            'heading': recipient.heading if recipient else None,
        },
        'opponent_stats': {
            'marking': opponent.marking if opponent else None,
            'tackling': opponent.tackling if opponent else None,
        }
    }


def create_test_match():
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"""
    try:
        home_team = Club.objects.first()
        away_team = Club.objects.exclude(id=home_team.id).first()
        
        home_players = list(home_team.player_set.all()[:11])
        away_players = list(away_team.player_set.all()[:11])
        
        if len(home_players) < 11:
            all_players = list(Player.objects.all())
            while len(home_players) < 11 and all_players:
                player = all_players.pop(0)
                if player not in home_players and player not in away_players:
                    home_players.append(player)
        
        home_lineup = {str(i): {"playerId": home_players[i].id} for i in range(min(11, len(home_players)))}
        away_lineup = {str(i): {"playerId": away_players[i].id} for i in range(min(11, len(away_players)))}
        
        match = Match(
            home_team=home_team,
            away_team=away_team,
            current_minute=1,
            home_score=0,
            away_score=0,
            status='live',
            current_zone='GK',
            st_shoots=0,
            st_passes=0,
            st_possessions=0,
            st_fouls=0,
            st_injury=0,
            home_momentum=0,
            away_momentum=0,
            possession_indicator=1,
            current_player_with_ball=None,
            home_lineup=home_lineup,
            away_lineup=away_lineup
        )
        
        return match
        
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∞—Ç—á–∞: {e}")
        return None


def analyze_first_pass_probability():
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Å–∞ –æ—Ç –≤—Ä–∞—Ç–∞—Ä—è"""
    
    print("–î–ò–ê–ì–ù–û–°–¢–ò–ö–ê –í–ï–†–û–Ø–¢–ù–û–°–¢–ò –ü–ï–†–í–û–ì–û –ü–ê–°–ê –û–¢ –í–†–ê–¢–ê–†–Ø")
    print("=" * 60)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –º–∞—Ç—á
    match = create_test_match()
    if not match:
        print("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –º–∞—Ç—á–∞")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–µ—Ä–≤–æ–≥–æ –ø–∞—Å–∞
    possessing_team = match.home_team
    opponent_team = match.away_team
    
    # –í—Ä–∞—Ç–∞—Ä—å (–ø–∞—Å—É—é—â–∏–π)
    goalkeeper = choose_player(possessing_team, "GK", match=match)
    if not goalkeeper:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω –≤—Ä–∞—Ç–∞—Ä—å")
        return
    
    # –ó–∞—â–∏—Ç–Ω–∏–∫ (–ø–æ–ª—É—á–∞—Ç–µ–ª—å)
    current_zone = "GK"
    target_zone = next_zone(current_zone)  # DEF-C
    defender = choose_player(possessing_team, target_zone, exclude_ids={goalkeeper.id}, match=match)
    if not defender:
        print("–ù–µ –Ω–∞–π–¥–µ–Ω –∑–∞—â–∏—Ç–Ω–∏–∫")
        return
    
    # –°–æ–ø–µ—Ä–Ω–∏–∫ (–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫)
    opponent = choose_player(opponent_team, target_zone, match=match)
    
    # –ú–æ–º–µ–Ω—Ç—É–º
    momentum = get_team_momentum(match, possessing_team)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
    analysis = debug_pass_probability(
        goalkeeper,
        defender,
        opponent,
        from_zone=current_zone,
        to_zone=target_zone,
        high=False,
        momentum=momentum
    )
    
    # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    print(f"\n–£–ß–ê–°–¢–ù–ò–ö–ò –ü–ê–°–ê:")
    print(f"–ü–∞—Å—É—é—â–∏–π (–≤—Ä–∞—Ç–∞—Ä—å): {goalkeeper.first_name} {goalkeeper.last_name}")
    print(f"  –ü–∞—Å: {analysis['passer_stats']['passing']}")
    print(f"  –í–∏–¥–µ–Ω–∏–µ: {analysis['passer_stats']['vision']}")
    print(f"  –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å: {analysis['passer_stats']['stamina']}")
    print(f"  –ú–æ—Ä–∞–ª—å: {analysis['passer_stats']['morale']}")
    
    print(f"\n–ü–æ–ª—É—á–∞—Ç–µ–ª—å (–∑–∞—â–∏—Ç–Ω–∏–∫): {defender.first_name} {defender.last_name}")
    print(f"  –ü–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {analysis['recipient_stats']['positioning']}")
    print(f"  –ò–≥—Ä–∞ –≥–æ–ª–æ–≤–æ–π: {analysis['recipient_stats']['heading']}")
    
    if opponent:
        print(f"\n–°–æ–ø–µ—Ä–Ω–∏–∫ (–ø–µ—Ä–µ—Ö–≤–∞—Ç—á–∏–∫): {opponent.first_name} {opponent.last_name}")
        print(f"  –û–ø–µ–∫–∞: {analysis['opponent_stats']['marking']}")
        print(f"  –û—Ç–±–æ—Ä: {analysis['opponent_stats']['tackling']}")
    else:
        print(f"\n–°–æ–ø–µ—Ä–Ω–∏–∫: –ù–ï–¢")
    
    print(f"\n–î–ï–¢–ê–õ–¨–ù–´–ô –†–ê–°–ß–ï–¢:")
    print(f"–ú–∞—Ä—à—Ä—É—Ç: {analysis['from_zone']} -> {analysis['to_zone']}")
    print(f"1. –ë–∞–∑–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {analysis['base_probability']:.3f} (90% –¥–ª—è GK->DEF)")
    print(f"2. –®—Ç—Ä–∞—Ñ –∑–∞ –¥–∞–ª—å–Ω–æ—Å—Ç—å: -{analysis['distance_penalty']:.3f}")
    print(f"3. –°–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –±–∞–∑–∞: {analysis['adjusted_base']:.3f}")
    print(f"4. –ë–æ–Ω—É—Å –ø–∞—Å—É—é—â–µ–≥–æ: +{analysis['passer_bonus']:.3f} (–ø–∞—Å+–≤–∏–¥–µ–Ω–∏–µ)/200")
    print(f"5. –ë–æ–Ω—É—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è: +{analysis['recipient_bonus']:.3f} (–ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ/200)")
    print(f"6. –ë–æ–Ω—É—Å –∑–∞ –∏–≥—Ä—É –≥–æ–ª–æ–≤–æ–π: +{analysis['heading_bonus']:.3f}")
    print(f"7. –®—Ç—Ä–∞—Ñ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: -{analysis['opponent_penalty']:.3f} (–æ–ø–µ–∫–∞+–æ—Ç–±–æ—Ä)/400")
    print(f"8. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç–∏: √ó{analysis['stamina_factor']:.3f}")
    print(f"9. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ—Ä–∞–ª–∏: √ó{analysis['morale_factor']:.3f}")
    print(f"10. –ú–Ω–æ–∂–∏—Ç–µ–ª—å –º–æ–º–µ–Ω—Ç—É–º–∞: √ó{analysis['momentum_factor']:.3f}")
    
    print(f"\n–ò–¢–û–ì:")
    print(f"–°—ã—Ä–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {analysis['raw_probability']:.3f}")
    print(f"–ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {analysis['final_probability']:.3f} ({analysis['final_probability']*100:.1f}%)")
    
    # –ê–Ω–∞–ª–∏–∑ –ø—Ä–æ–±–ª–µ–º
    print(f"\n–ê–ù–ê–õ–ò–ó –ü–†–û–ë–õ–ï–ú:")
    
    if analysis['opponent_penalty'] > 0.2:
        print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê: –°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π —à—Ç—Ä–∞—Ñ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞ ({analysis['opponent_penalty']:.3f})")
        print(f"   –û–ø–µ–∫–∞ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {analysis['opponent_stats']['marking']}")
        print(f"   –û—Ç–±–æ—Ä —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {analysis['opponent_stats']['tackling']}")
    
    if analysis['passer_bonus'] < 0.3:
        print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∏–π –±–æ–Ω—É—Å –ø–∞—Å—É—é—â–µ–≥–æ ({analysis['passer_bonus']:.3f})")
        print(f"   –ü–∞—Å –≤—Ä–∞—Ç–∞—Ä—è: {analysis['passer_stats']['passing']}")
        print(f"   –í–∏–¥–µ–Ω–∏–µ –≤—Ä–∞—Ç–∞—Ä—è: {analysis['passer_stats']['vision']}")
    
    if analysis['stamina_factor'] < 0.8:
        print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å ({analysis['stamina_factor']:.3f})")
        print(f"   –í—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å –≤—Ä–∞—Ç–∞—Ä—è: {analysis['passer_stats']['stamina']}")
    
    if analysis['morale_factor'] < 0.8:
        print(f"üî¥ –ü–†–û–ë–õ–ï–ú–ê: –ù–∏–∑–∫–∞—è –º–æ—Ä–∞–ª—å ({analysis['morale_factor']:.3f})")
        print(f"   –ú–æ—Ä–∞–ª—å –≤—Ä–∞—Ç–∞—Ä—è: {analysis['passer_stats']['morale']}")
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–µ–≤
    print(f"\n" + "="*60)
    print("–ê–ù–ê–õ–ò–ó –ù–ï–°–ö–û–õ–¨–ö–ò–• –°–õ–£–ß–ê–ô–ù–´–• –ü–ê–°–û–í:")
    
    for i in range(3):
        print(f"\n–°–ª—É—á–∞–π {i+1}:")
        
        # –ù–æ–≤—ã–µ –∏–≥—Ä–æ–∫–∏
        gk = choose_player(possessing_team, "GK", match=match)
        df = choose_player(possessing_team, target_zone, exclude_ids={gk.id}, match=match)
        op = choose_player(opponent_team, target_zone, match=match)
        
        if gk and df:
            analysis = debug_pass_probability(gk, df, op, from_zone="GK", to_zone="DEF-C", momentum=0)
            print(f"  {gk.last_name} -> {df.last_name}")
            print(f"  –°–æ–ø–µ—Ä–Ω–∏–∫: {op.last_name if op else '–ù–ï–¢'}")
            print(f"  –ò—Ç–æ–≥–æ–≤–∞—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å: {analysis['final_probability']:.3f} ({analysis['final_probability']*100:.1f}%)")
            print(f"  –®—Ç—Ä–∞—Ñ –æ—Ç —Å–æ–ø–µ—Ä–Ω–∏–∫–∞: {analysis['opponent_penalty']:.3f}")


if __name__ == "__main__":
    analyze_first_pass_probability()