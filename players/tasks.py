import logging
from celery import shared_task
from django.utils import timezone
from django.db import transaction
from datetime import datetime
import pytz

from .training_logic import conduct_all_teams_training

logger = logging.getLogger("player_training")


@shared_task(name='players.conduct_scheduled_training', bind=True)
def conduct_scheduled_training(self):
    """
    –ü—Ä–æ–≤–æ–¥–∏—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é: –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞ –≤ 12:00 CET.
    """
    now = timezone.now()
    logger.info(f"üèãÔ∏è [conduct_scheduled_training] –ó–∞–ø—É—Å–∫ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫ –≤ {now}")

    try:
        with transaction.atomic():
            # –ü—Ä–æ–≤–æ–¥–∏–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥
            stats = conduct_all_teams_training()
            
            logger.info(
                f"‚úÖ –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
                f"–ö–æ–º–∞–Ω–¥: {stats['teams_trained']}, "
                f"–ò–≥—Ä–æ–∫–æ–≤: {stats['players_trained']}, "
                f"–£–ª—É—á—à–µ–Ω–∏–π: {stats['total_improvements']}, "
                f"–í —Ä–∞—Å—Ü–≤–µ—Ç–µ: {stats['players_in_bloom']}, "
                f"–û—à–∏–±–æ–∫: {stats['errors']}"
            )
            
            return {
                'status': 'success',
                'timestamp': now.isoformat(),
                'stats': stats
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫: {e}")
        return {
            'status': 'error',
            'timestamp': now.isoformat(),
            'error': str(e)
        }


@shared_task(name='players.advance_player_seasons', bind=True)
def advance_player_seasons(self):
    """
    –ü—Ä–æ–¥–≤–∏–≥–∞–µ—Ç —Å–µ–∑–æ–Ω—ã —Ä–∞—Å—Ü–≤–µ—Ç–∞ –∏–≥—Ä–æ–∫–æ–≤.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –≤ –Ω–∞—á–∞–ª–µ –∫–∞–∂–¥–æ–≥–æ –Ω–æ–≤–æ–≥–æ —Å–µ–∑–æ–Ω–∞.
    """
    from .models import Player
    
    now = timezone.now()
    logger.info(f"üìÖ [advance_player_seasons] –ü—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ —Å–µ–∑–æ–Ω–æ–≤ –∏–≥—Ä–æ–∫–æ–≤ –≤ {now}")
    
    stats = {
        'players_processed': 0,
        'blooms_started': 0,
        'blooms_ended': 0,
        'errors': 0
    }
    
    try:
        with transaction.atomic():
            players = Player.objects.all()
            
            for player in players:
                try:
                    stats['players_processed'] += 1
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç—å —Ä–∞—Å—Ü–≤–µ—Ç
                    if player.should_start_bloom():
                        player.start_bloom()
                        stats['blooms_started'] += 1
                        logger.info(
                            f"üåü –ù–∞—á–∞—Ç —Ä–∞—Å—Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ {player.full_name} "
                            f"({player.bloom_type}, –≤–æ–∑—Ä–∞—Å—Ç {player.age})"
                        )
                    
                    # –ü—Ä–æ–¥–≤–∏–≥–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π —Ä–∞—Å—Ü–≤–µ—Ç
                    if player.is_in_bloom:
                        old_seasons = player.bloom_seasons_left
                        player.advance_bloom_season()
                        
                        if player.bloom_seasons_left == 0:
                            stats['blooms_ended'] += 1
                            logger.info(
                                f"üèÅ –ó–∞–≤–µ—Ä—à–µ–Ω —Ä–∞—Å—Ü–≤–µ—Ç –∏–≥—Ä–æ–∫–∞ {player.full_name} "
                                f"({player.bloom_type})"
                            )
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–≥—Ä–æ–∫–∞ {player.id}: {e}")
                    stats['errors'] += 1
            
            logger.info(
                f"‚úÖ –°–µ–∑–æ–Ω—ã –∏–≥—Ä–æ–∫–æ–≤ –ø—Ä–æ–¥–≤–∏–Ω—É—Ç—ã. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: "
                f"–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {stats['players_processed']}, "
                f"–†–∞—Å—Ü–≤–µ—Ç–æ–≤ –Ω–∞—á–∞—Ç–æ: {stats['blooms_started']}, "
                f"–†–∞—Å—Ü–≤–µ—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: {stats['blooms_ended']}, "
                f"–û—à–∏–±–æ–∫: {stats['errors']}"
            )
            
            return {
                'status': 'success',
                'timestamp': now.isoformat(),
                'stats': stats
            }
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–∏ —Å–µ–∑–æ–Ω–æ–≤: {e}")
        return {
            'status': 'error',
            'timestamp': now.isoformat(),
            'error': str(e)
        }


def is_training_day():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–º.
    –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ –ø—Ä–æ—Ö–æ–¥—è—Ç –≤ –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ (0), —Å—Ä–µ–¥—É (2) –∏ –ø—è—Ç–Ω–∏—Ü—É (4).
    """
    cet = pytz.timezone('CET')
    now_cet = timezone.now().astimezone(cet)
    weekday = now_cet.weekday()
    return weekday in [0, 2, 4]  # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫, —Å—Ä–µ–¥–∞, –ø—è—Ç–Ω–∏—Ü–∞


@shared_task(name='players.check_training_schedule', bind=True)
def check_training_schedule(self):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –ø—Ä–æ–≤–æ–¥–∏—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É —Å–µ–≥–æ–¥–Ω—è.
    –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 12:00 CET.
    """
    if is_training_day():
        logger.info("üìÖ –°–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å, –∑–∞–ø—É—Å–∫–∞–µ–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏...")
        return conduct_scheduled_training.delay()
    else:
        logger.info("üìÖ –°–µ–≥–æ–¥–Ω—è –Ω–µ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã–π –¥–µ–Ω—å, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º...")
        return {
            'status': 'skipped',
            'reason': 'Not a training day',
            'timestamp': timezone.now().isoformat()
        }